X = seq(-2,2,0.1)
Y = rep(NA,length(X))
for (i in 1:length(X)){
if (X[i]<1){
Y[i] = 1 + 1*X[i]
}
else{
Y[i] = 1 + 1*X[i] - 2*(X[i]-1)^2
}
}
plot(X,Y,type='l')
abline(h=0);abline(v=0);abline(v = 1, col = "red")
grid()
abline(h=0);abline(v=0)
plot(X,Y,type='l')
abline(h=0)
plot(X,Y,type='l')
abline(h=0)
plot(X,Y,type='l')
abline(h=0)
abline(v=0)
abline(v = 1, col = "red")
grid()
plot(X,Y,type='l') +
abline(h=0) +
abline(v=0) +
abline(v = 1, col = "red")
plot(X,Y,type='l') +
abline(h=0) +
abline(v=0) +
abline(v = 1, col = "red") +
grid()
plot(X,Y,type='l') +
abline(h=0, col = "green") +
abline(v=0, col = "blue") +
abline(v = 1, col = "red") +
plot(X,Y,type='l') +
abline(h=0, col = "green") +
abline(v=0, col = "blue") +
abline(v = 1, col = "red")
libraries()
install.packages("ISLR")
install.packages("ISLR2")
install.packages('ISLR')
library(ISLR)
library(ISLR)
# Cross validation to choose degree of polynomial.
set.seed(1)
cv.error.10 = rep(0,10)
for (i in 1:10) {
glm.fit=glm(wage~poly(age,i),data=Wage)
cv.error.10[i]=cv.glm(Wage,glm.fit,K=10)$delta[1]
}
library(ISLR)
library(glmnet)
# Cross validation to choose degree of polynomial.
set.seed(1)
cv.error.10 = rep(0,10)
for (i in 1:10) {
glm.fit=glm(wage~poly(age,i),data=Wage)
cv.error.10[i]=cv.glm(Wage,glm.fit,K=10)$delta[1]
}
library(ISLR)
library(boot)
# Cross validation to choose degree of polynomial.
set.seed(1)
cv.error.10 = rep(0,10)
for (i in 1:10) {
glm.fit=glm(wage~poly(age,i),data=Wage)
cv.error.10[i]=cv.glm(Wage,glm.fit,K=10)$delta[1]
}
cv.error.10
plot(cv.error.10, type="b", xlab="Degree", ylab="CV Error")
set.seed(0)
cv.error.10 = rep(0,10)
for (i in 1:10) {
glm.fit=glm(wage~poly(age,i),data=Wage)
cv.error.10[i]=cv.glm(Wage,glm.fit,K=10)$delta[1]
}
cv.error.10
plot(cv.error.10, type="b", xlab="degree", ylab="error")
set.seed(0)
cv.error.10 = rep(0,10)
for (i in 1:10) {
glm.fit=glm(wage~poly(age,i),data=Wage)
cv.error.10[i]=cv.glm(Wage,glm.fit,K=10)$delta[1]
}
cv.error.10
plot(cv.error.10, type="b", xlab="degree", ylab="error")
lm.fit = glm(wage~poly(age,4),data=Wage)
summary(lm.fit)
fit.1 = lm(wage~age ,data=Wage)
fit.2 = lm(wage~poly(age ,2) ,data=Wage)
fit.3 = lm(wage~poly(age ,3) ,data=Wage)
fit.4 = lm(wage~poly(age ,4) ,data=Wage)
fit.5 = lm(wage~poly(age ,5) ,data=Wage)
anova(fit.1,fit.2,fit.3,fit.4,fit.5)
# Grid of values for age at which we want predictions.
agelims=range(age)
# Grid of values for age at which we want predictions.
agelims=range(wage$age)
set.seed(0)
cv.error.10 = rep(0,10)
for (i in 1:10) {
glm.fit=glm(wage~poly(age,i),data=Wage)
cv.error.10[i]=cv.glm(Wage,glm.fit,K=10)$delta[1]
}
cv.error.10
plot(cv.error.10, type="b", xlab="degree", ylab="error")
lm.fit = glm(wage~poly(age,4),data=Wage)
summary(lm.fit)
fit.1 = lm(wage~age ,data=Wage)
fit.2 = lm(wage~poly(age ,2) ,data=Wage)
fit.3 = lm(wage~poly(age ,3) ,data=Wage)
fit.4 = lm(wage~poly(age ,4) ,data=Wage)
fit.5 = lm(wage~poly(age ,5) ,data=Wage)
anova(fit.1,fit.2,fit.3,fit.4,fit.5)
# Grid of values for age at which we want predictions.
agelims=range(wage$age)
# Grid of values for age at which we want predictions.
agelims=range(age)
# Grid of values for age at which we want predictions.
agelims=range(wage)
X = seq(-2,2,0.1)
Y = rep(NA,length(X))
for (i in 1:length(X)){
if (X[i]<1){
Y[i] = 1 + 1*X[i]
}
else{
Y[i] = 1 + 1*X[i] - 2*(X[i]-1)^2
}
}
plot(X,Y,type='l') +
abline(h=0, col = "green") +
abline(v=0, col = "blue") +
abline(v = 1, col = "red")
library(ISLR)
library(boot)
set.seed(0)
cv.error.10 = rep(0,10)
for (i in 1:10) {
glm.fit=glm(wage~poly(age,i),data=Wage)
cv.error.10[i]=cv.glm(Wage,glm.fit,K=10)$delta[1]
}
cv.error.10
plot(cv.error.10, type="b", xlab="degree", ylab="error")
lm.fit = glm(wage~poly(age,4),data=Wage)
summary(lm.fit)
fit.1 = lm(wage~age ,data=Wage)
fit.2 = lm(wage~poly(age ,2) ,data=Wage)
fit.3 = lm(wage~poly(age ,3) ,data=Wage)
fit.4 = lm(wage~poly(age ,4) ,data=Wage)
fit.5 = lm(wage~poly(age ,5) ,data=Wage)
anova(fit.1,fit.2,fit.3,fit.4,fit.5)
# Grid of values for age at which we want predictions.
agelims=range(age)
wage
Wage
# Grid of values for age at which we want predictions.
agelims=range(Wage$age)
age.grid=seq(from=agelims[1],to=agelims[2])
# Predictions.
preds=predict(lm.fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
# Plot of polynomial fit onto data including SE bands.
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
# Grid of values for age at which we want predictions.
agelims=range(Wage$age)
age.grid=seq(from=agelims[1],to=agelims[2])
# Predictions.
preds=predict(lm.fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
# Plot of polynomial fit onto data including SE bands.
plot(Wage$age,wage,xlim=agelims,cex=.5,col="darkgrey")
# Grid of values for age at which we want predictions.
agelims=range(Wage$age)
age.grid=seq(from=agelims[1],to=agelims[2])
# Predictions.
preds=predict(lm.fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
# Plot of polynomial fit onto data including SE bands.
plot(Wage$age,Wage,xlim=agelims,cex=.5,col="darkgrey")
# Grid of values for age at which we want predictions.
agelims=range(Wage$age)
age.grid=seq(from=agelims[1],to=agelims[2])
# Predictions.
preds=predict(lm.fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se.fit,preds$fit-2*preds$se.fit)
# Plot of polynomial fit onto data including SE bands.
plot(Wage$age,Wage$wage,xlim=agelims,cex=.5,col="darkgrey")
title("Polynomial fit using degree 4")
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,lwd =1,col="blue",lty =3)
set.seed(0)
cv.error.20 = rep(NA,19)
for (i in 2:20) {
Wage$age.cut = cut(Wage$age,i)
step.fit=glm(wage~age.cut,data=Wage)
cv.error.20[i-1]=cv.glm(Wage,step.fit,K=10)$delta[1]
}
cv.error.20
plot(cv.error.20,type='b',ylab="error")
set.seed(0)
cv.error.20 = rep(NA,19)
for (i in 2:20) {
Wage$age.cut = cut(Wage$age,i)
step.fit=glm(wage~age.cut,data=Wage)
cv.error.20[i-1]=cv.glm(Wage,step.fit,K=10)$delta[1]
}
cv.error.20
plot(cv.error.20,type='b',ylab="error", xlab='step)
set.seed(0)
cv.error.20 = rep(NA,19)
for (i in 2:20) {
Wage$age.cut = cut(Wage$age,i)
step.fit=glm(wage~age.cut,data=Wage)
cv.error.20[i-1]=cv.glm(Wage,step.fit,K=10)$delta[1]
}
cv.error.20
plot(cv.error.20,type='b',ylab="error",xlab='step')
# step.fit = glm(wage~cut(age,8), data=Wage)
# preds2=predict(step.fit,newdata=list(age=age.grid), se=T)
# se.bands2=cbind(preds2$fit+2*preds2$se.fit,preds2$fit-2*preds2$se.fit)
# plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
# title("Step function using 8 cuts")
# lines(age.grid,preds2$fit,lwd=2,col="blue")
# matlines(age.grid,se.bands2,lwd =1,col="blue",lty =3)
step.fit = glm(wage~cut(age,8), data=Wage)
preds2=predict(step.fit,newdata=list(age=age.grid), se=T)
se.bands2=cbind(preds2$fit+2*preds2$se.fit,preds2$fit-2*preds2$se.fit)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
step.fit = glm(wage~cut(age,8), data=Wage)
preds2=predict(step.fit,newdata=list(Wage$age=age.grid), se=T)
step.fit = glm(wage~cut(age,8), data=Wage)
preds2=predict(step.fit,newdata=list(age=age.grid), se=T)
se.bands2=cbind(preds2$fit+2*preds2$se.fit,preds2$fit-2*preds2$se.fit)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
step.fit = glm(wage~cut(age,8), data=Wage)
preds2=predict(step.fit,newdata=list(age=age.grid), se=T)
se.bands2=cbind(preds2$fit+2*preds2$se.fit,preds2$fit-2*preds2$se.fit)
plot(Wage$age,Wage$wage,xlim=agelims,cex=.5,col="darkgrey")
title("Step function using 8 cuts")
lines(age.grid,preds2$fit,lwd=2,col="blue")
matlines(age.grid,se.bands2,lwd =1,col="blue",lty =3)
step.fit = glm(wage~cut(age,7), data=Wage)
preds2=predict(step.fit,newdata=list(age=age.grid), se=T)
se.bands2=cbind(preds2$fit+2*preds2$se.fit,preds2$fit-2*preds2$se.fit)
plot(Wage$age,Wage$wage,xlim=agelims,cex=.5,col="darkgrey")
title("Step function using 7 cuts")
lines(age.grid,preds2$fit,lwd=2,col="blue")
matlines(age.grid,se.bands2,lwd =1,col="blue",lty =3)
step.fit = glm(wage~cut(age,7), data=Wage)
preds2=predict(step.fit,newdata=list(age=age.grid), se=T)
se.bands2=cbind(preds2$fit+2*preds2$se.fit,preds2$fit-2*preds2$se.fit)
plot(Wage$age,Wage$wage,xlim=agelims,cex=.5,col="darkgrey")
title("Step function using 7 cuts")
lines(age.grid,preds2$fit,lwd=2,col="blue")
matlines(age.grid,se.bands2,lwd =1,col="blue",lty =3)
fit.fwd = regsubsets(Outstate~., data=college_train, nvmax=17, method="forward")
library(leaps)
library(leaps)
fit.fwd = regsubsets(Outstate~., data=college_train, nvmax=17, method="forward")
library('leaps')
fit.fwd = regsubsets(Outstate~., data=college_train, nvmax=17, method="forward")
library(leaps)
fit.fwd = regsubsets(Outstate~., data=college_train, nvmax=17, method="forward")
set.seed(0)
college_data = College
college_sample = sample.split(college_data$Outstate, SplitRatio = 0.80)
library(caTools)
set.seed(0)
college_data = College
college_sample = sample.split(college_data$Outstate, SplitRatio = 0.80)
college_train = subset(college_data, college_sample==TRUE)
college_test = subset(college_data, college_sample==FALSE)
library(caTools)
set.seed(0)
college_data = College
college_sample = sample.split(college_data$Outstate, SplitRatio = 0.80)
college_train = subset(college_data, college_sample==TRUE)
college_test = subset(college_data, college_sample==FALSE)
library(leaps)
fit.fwd = regsubsets(Outstate~., data=college_train, nvmax=17, method="forward")
fit.summary = summary(fit.fwd)
which.min(fit.summary$cp)
which.min(fit.summary$bic)
which.max(fit.summary$adjr2)
par(mfrow=c(2,2))
plot(1:17, fit.summary$cp,xlab="Variables",ylab="Cp",main="Cp", type='b')
plot(1:17, fit.summary$bic,xlab="Variables",ylab="BIC",main="BIC", type='b')
plot(1:17, fit.summary$adjr2,xlab="Variables",ylab="Adjusted R2",main="Adjusted R2", type='b')
library(leaps)
fit.fwd = regsubsets(Outstate~., data=college_train, nvmax=17, method="forward")
fit.summary = summary(fit.fwd)
which.min(fit.summary$cp)
which.min(fit.summary$bic)
which.max(fit.summary$adjr2)
par(mfrow=c(2,2))
plot(1:17, fit.summary$cp,xlab="Variables",ylab="Cp",main="Cp", type='b')
plot(1:17, fit.summary$bic,xlab="Variables",ylab="BIC",main="BIC", type='b')
plot(1:17, fit.summary$adjr2,xlab="Variables",ylab="Adjusted R2",main="Adjusted R2", type='b')
coef(fit.fwd,6)
gam.m1 = gam(Outstate~Private+
s(Room.Board,4)+
s(PhD,4)+
s(perc.alumni,2)+
s(Expend,4)+
s(Grad.Rate,5), data=college_train)
library(pls)
install.packages(pls)
install.packages('pls')
install.packages(pls)
install.packages("pls")
liubrary(MASS)
library(MASS)
gam.m1 = gam(Outstate~Private+
s(Room.Board,4)+
s(PhD,4)+
s(perc.alumni,2)+
s(Expend,4)+
s(Grad.Rate,5), data=college_train)
par(mfrow=c(2,3))
plot(gam.m1, col="blue", se=T)
library(pls)
install.packages("pls", type = "source")
install.packages(ggplot2)
install.packages("ggplot2")
