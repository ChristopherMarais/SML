)
grid_df$D2 = as.integer((D2_probs>threshold))
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$L1),
main='L1',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$L2),
main='L2',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
# load data
setwd(getwd())
data <- read.csv("SML.NN.data.csv")
train_data = data[data$set == 'train' | data$set == 'valid',]
test_data = data[data$set == 'test',]
# load MASS
library(MASS)
plot(data$X1,
data$X2,
pch=8,
col=factor(data$Y),
main='Data',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
L1 = glm(Y ~ 1 + X1 + X2,
data=train_data,
family=binomial)
summary(L1)
L2 = glm(Y ~ 1 + X1 + X2 + X1^2 + X2^2 + X1*X2,
data=train_data,
family=binomial)
summary(L2)
D1 = lda(Y ~ X1 + X2,
data=train_data)
D1
D2 = qda(Y ~ X1 + X2,
data=train_data)
D2
MCR <- function(true_vals, pred_probs, threshold=0.5){
if(length(true_vals)!=length(pred_probs)){
print("ERROR: predictions and true values not of same shape")
}else{
pred_vals = as.integer((pred_probs > threshold))
mcr = sum(pred_vals != true_vals)/length(true_vals)
return(mcr)
}
}
L1_probs = data.frame(
predict(L1,
test_data,
type ="response"
)
)
MCR(
true_vals=test_data$Y,
pred_probs=L1_probs[,1],
threshold=0.5)
L2_probs = data.frame(
predict(L2,
test_data,
type ="response"
)
)
MCR(
true_vals=test_data$Y,
pred_probs=L2_probs[,1],
threshold=0.5)
D1_probs = data.frame(
predict(D1,
test_data)$posterior[,2]
)
MCR(
true_vals=test_data$Y,
pred_probs=D1_probs[,1],
threshold=0.5)
D2_probs = data.frame(
predict(D2,
test_data)$posterior[,2]
)
MCR(
true_vals=test_data$Y,
pred_probs=D2_probs[,1],
threshold=0.5)
# define threshold
threshold = 0.5
# create grid of points
axis_ticks = seq(-2,2,0.1)
grid_df = expand.grid(axis_ticks,axis_ticks)
colnames(grid_df) <- c("X1","X2")
# L1 prediction
L1_probs = data.frame(
predict(L1,
grid_df,
type ="response"
)
)
grid_df$L1 = as.integer((L1_probs>threshold))
# L2 prediction
L2_probs = data.frame(
predict(L2,
grid_df,
type ="response"
)
)
grid_df$L2 = as.integer((L2_probs>threshold))
# D1 prediction
D1_probs = data.frame(
predict(D1,
grid_df)$posterior[,2]
)
grid_df$D1 = as.integer((D1_probs>threshold))
# D2 prediction
D2_probs = data.frame(
predict(D2,
grid_df)$posterior[,2]
)
grid_df$D2 = as.integer((D2_probs>threshold))
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$L1),
main='L1',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$L2),
main='L2',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$D1),
main='D1',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$D2),
main='D2',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(train_data$X1,
train_data$X2,
pch=8,
col=factor(train_data$Y),
main='Training Data',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(test_data$X1,
test_data$X2,
pch=8,
col=factor(test_data$Y),
main='Testing Data',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
Odds &= \frac{P(X)}{1-P(X)}\\
P(X) &= \frac{0.37}{1.37} = 0.27
## Question 9
#### 9.a
Odds &= \frac{P(X)}{1-P(X)}\\
P(X) &= \frac{0.37}{1.37} = 0.27
```{R}
Odds &= \frac{P(X)}{1-P(X)}\\
P(X) &= \frac{0.37}{1.37} = 0.27
```
#### 9.b
# load data
setwd(getwd())
data <- read.csv("SML.NN.data.csv")
train_data = data[data$set == 'train' | data$set == 'valid',]
test_data = data[data$set == 'test',]
# load MASS
library(MASS)
data = Auto
library(ISLR2)
data = Auto
auto_data = Auto
mpg_med = median(auto_data$mpg)
View(auto_data)
(auto_data$mpg>mpg_med)
auto_data$mpg01 = as.integer((auto_data$mpg>mpg_med))
plot(auto_data)
cor(auto_data)
View(auto_data)
cor(auto_data[, !names])
cor(auto_data[, !"names"])
cor(auto_data[, "names"])
cor(auto_data[, -9])
plot(cor(auto_data[, -9]))
heatmap(cor(auto_data[, -9]))
boxplot(auto_data[, -9])
boxplot(auto_data[, c(-5, -9)])
boxplot(auto_data[, c(-9)])
set.seed(42)
sample <- sample.int(n = nrow(auto_data), size = floor(0.75*nrow(auto_data)), replace = F)
train <- auto_data[sample, ]
test  <- auto_data[-sample, ]
lda_auto = lda(mpg01 ~ cylinders+displacement+horsepower+weight, data=train)
View(test)
lda_auto = lda(mpg01 ~ cylinders+displacement+horsepower+weight, data=train)
summary(lda_auto)
lda_auto
lda_auto_probs = data.frame(
predict(lda_auto,
test)$posterior[,2]
)
MCR(
true_vals=test$mpg01,
pred_probs=lda_auto_probs[,1],
threshold=0.5)
qda_auto = qda(mpg01 ~ cylinders+displacement+horsepower+weight, data=train)
qda_auto
qda_auto_probs = data.frame(
predict(qda_auto,
test)$posterior[,2]
)
MCR(
true_vals=test$mpg01,
pred_probs=qda_auto_probs[,1],
threshold=0.5)
L1 = glm(mpg01 ~ cylinders+displacement+horsepower+weight,
data=train,
family="binomial")
summary(L1)
# load data
setwd(getwd())
data <- read.csv("SML.NN.data.csv")
train_data = data[data$set == 'train' | data$set == 'valid',]
test_data = data[data$set == 'test',]
# load MASS
library(MASS)
library(ISLR2)
MCR <- function(true_vals, pred_probs, threshold=0.5){
if(length(true_vals)!=length(pred_probs)){
print("ERROR: predictions and true values not of same shape")
}else{
pred_vals = as.integer((pred_probs > threshold))
mcr = sum(pred_vals != true_vals)/length(true_vals)
return(mcr)
}
}
auto_data = Auto
mpg_med = median(auto_data$mpg)
auto_data$mpg01 = as.integer((auto_data$mpg>mpg_med))
heatmap(cor(auto_data[, -9]))
boxplot(auto_data[, c(-9)])
set.seed(42)
sample <- sample.int(n = nrow(auto_data),
size = floor(0.75*nrow(auto_data)),
replace = F)
train <- auto_data[sample, ]
test  <- auto_data[-sample, ]
lda_auto = lda(mpg01 ~ cylinders+displacement+horsepower+weight, data=train)
lda_auto
lda_auto_probs = data.frame(
predict(lda_auto,
test)$posterior[,2]
)
MCR(
true_vals=test$mpg01,
pred_probs=lda_auto_probs[,1],
threshold=0.5)
qda_auto = qda(mpg01 ~ cylinders+displacement+horsepower+weight, data=train)
qda_auto
qda_auto_probs = data.frame(
predict(qda_auto,
test)$posterior[,2]
)
MCR(
true_vals=test$mpg01,
pred_probs=qda_auto_probs[,1],
threshold=0.5)
lr_auto = glm(mpg01 ~ cylinders+displacement+horsepower+weight,
data=train,
family="binomial")
summary(lr_auto)
lr_auto_probs = data.frame(
predict(lr_auto,
test,
type ="response"
)
)
MCR(
true_vals=test$mpg01,
pred_probs=lr_auto_probs[,1],
threshold=0.5)
plot(train_data$X1,
train_data$X2,
pch=8,
col=factor(train_data$Y),
main='Training Data',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(test_data$X1,
test_data$X2,
pch=8,
col=factor(test_data$Y),
main='Testing Data',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
L1 = glm(Y ~ 1 + X1 + X2,
data=train_data,
family="binomial")
summary(L1)
L2 = glm(Y ~ 1 + X1 + X2 + X1^2 + X2^2 + X1*X2,
data=train_data,
family="binomial")
summary(L2)
D1 = lda(Y ~ X1 + X2,
data=train_data)
D1
D2 = qda(Y ~ X1 + X2,
data=train_data)
D2
L1_probs = data.frame(
predict(L1,
test_data,
type ="response"
)
)
MCR(
true_vals=test_data$Y,
pred_probs=L1_probs[,1],
threshold=0.5)
L2_probs = data.frame(
predict(L2,
test_data,
type ="response"
)
)
MCR(
true_vals=test_data$Y,
pred_probs=L2_probs[,1],
threshold=0.5)
D1_probs = data.frame(
predict(D1,
test_data)$posterior[,2]
)
MCR(
true_vals=test_data$Y,
pred_probs=D1_probs[,1],
threshold=0.5)
D2_probs = data.frame(
predict(D2,
test_data)$posterior[,2]
)
MCR(
true_vals=test_data$Y,
pred_probs=D2_probs[,1],
threshold=0.5)
# define threshold
threshold = 0.5
# create grid of points
axis_ticks = seq(-2,2,0.1)
grid_df = expand.grid(axis_ticks,axis_ticks)
colnames(grid_df) <- c("X1","X2")
# L1 prediction
L1_probs = data.frame(
predict(L1,
grid_df,
type ="response"
)
)
grid_df$L1 = as.integer((L1_probs>threshold))
# L2 prediction
L2_probs = data.frame(
predict(L2,
grid_df,
type ="response"
)
)
grid_df$L2 = as.integer((L2_probs>threshold))
# D1 prediction
D1_probs = data.frame(
predict(D1,
grid_df)$posterior[,2]
)
grid_df$D1 = as.integer((D1_probs>threshold))
# D2 prediction
D2_probs = data.frame(
predict(D2,
grid_df)$posterior[,2]
)
grid_df$D2 = as.integer((D2_probs>threshold))
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$L1),
main='L1',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$L2),
main='L2',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$D1),
main='D1',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
plot(grid_df$X1,
grid_df$X2,
pch=8,
col=factor(grid_df$D2),
main='D2',
xlab="X1",
ylab="X2")
legend(1.3,
1.5,
legend=c('1', '0'),
col=c('r', 'b'),
fill=2:1,
bg="white")
